name: Code Metrics

on:
  # manual trigger
  workflow_dispatch:
  # scheduled trigger: every 2 weeks on Wednesday at 23:59
  schedule:
      - cron: '59 23 * * 3/2'

jobs:
  count-lines-and-coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Set Trigger Environment Variable
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "MANUALLY_TRIGGERED=true" >> $GITHUB_ENV
        else
          echo "MANUALLY_TRIGGERED=false" >> $GITHUB_ENV
        fi

    # notify: Nicholas and Nileena using their Slack IDs
    - name: Set Slack users to notify if this is a scheduled run
      if: env.MANUALLY_TRIGGERED == 'false'
      run: |
        echo "SLACK_USERS=<@U017GV0LRAR> <@UKQ250V26>" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Count lines of code
      id: linecount
      run: |
        # Install cloc if not already installed
        sudo apt-get update && sudo apt-get install -y cloc
        
        # Run cloc at the HEAD of the repository and capture JSON output
        echo "Running cloc at HEAD..."
        cloc --exclude-dir=node_modules,.git --json . > cloc_output.json
        
        # Install jq if not already installed
        sudo apt-get install -y jq
        
        # Get total lines of code
        TOTAL_LINES=$(jq -r '.SUM.code' cloc_output.json)
        echo "TOTAL_LINES=$TOTAL_LINES" >> $GITHUB_ENV
        
        # Transform the JSON to the subset format for Slack
        cat <<EOF > transform.jq
        {
          "header": {
            "number of files": .SUM.nFiles,
            "number of lines": (.SUM.blank + .SUM.comment + .SUM.code)
          },
          "XML": {
            "number of Files": .XML.nFiles,
            "code": .XML.code
          },
          "JSON": {
            "number of Files": .JSON.nFiles,
            "code": .JSON.code
          },
          "Java": {
            "number of Files": .Java.nFiles,
            "code": .Java.code
          },
          "Maven": {
            "number of Files": .Maven.nFiles,
            "code": .Maven.code
          },
          "YAML": {
            "number of Files": .YAML.nFiles,
            "code": .YAML.code
          },
          "Markdown": {
            "number of Files": .Markdown.nFiles,
            "code": .Markdown.code
          },
          "Cucumber": {
            "number of Files": .Cucumber.nFiles,
            "code": .Cucumber.code
          },
          "Bourne Shell": {
            "number of Files": ."Bourne Shell".nFiles,
            "code": ."Bourne Shell".code
          },
          "Python": {
            "number of Files": .Python.nFiles,
            "code": .Python.code
          },
          "TOML": {
            "number of Files": .TOML.nFiles,
            "code": .TOML.code
          },
          "Dockerfile": {
            "number of Files": .Dockerfile.nFiles,
            "code": .Dockerfile.code
          },
          "Text": {
            "number of Files": .Text.nFiles,
            "code": .Text.code
          },
          "Properties": {
            "number of Files": .Properties.nFiles,
            "code": .Properties.code
          },
          "SUM": {
            "blank": .SUM.blank,
            "number of Files": .SUM.nFiles
          }
        }
        EOF
        
        # Apply the transformation
        jq -f transform.jq cloc_output.json > cloc_subset.json
        
        # Create a more readable format for the Slack message
        echo "CLOC_JSON<<EOF" >> $GITHUB_ENV
        cat cloc_subset.json >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "Total lines of code: $TOTAL_LINES"
        
        # Display full cloc summary for debugging and information
        echo "Full cloc JSON summary:"
        cat cloc_output.json

        echo "Subset cloc JSON summary:"
        cat cloc_subset.json

    - name: Format cloc data for Slack
      run: |
        # Create a text summary first
        cat > cloc_summary.txt << EOF
        Total files: $(jq -r '.header."number of files"' cloc_subset.json)
        Total lines: $(jq -r '.header."number of lines"' cloc_subset.json)

        Language breakdown:
        $(jq -r 'to_entries | sort_by(-(.value.code // 0)) | map(select(.key != "header" and .key != "SUM")) | map("â€¢ \(.key): \(.value.code // 0) lines in \(.value."number of Files" // 0) files") | join("\n")' cloc_subset.json)
        EOF

        # Use jq to properly escape the entire content for JSON
        ESCAPED_SUMMARY=$(cat cloc_summary.txt | jq -Rs .)
        echo "CLOC_FORMATTED=${ESCAPED_SUMMARY}" >> $GITHUB_ENV

    - name: Slack notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_QPPSF_ALERTS_WEBHOOK }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": "*Conversion Tool Code Metrics*\n\nTotal lines of code: ${{ env.TOTAL_LINES }}\n\n```${{ fromJson(env.CLOC_FORMATTED) }}```${{ env.SLACK_USERS }}"
          }
      # Continue even if Slack notification fails
      continue-on-error: true

